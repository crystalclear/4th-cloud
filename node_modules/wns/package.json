{
  "name": "wns",
  "author": {
    "name": "Tomasz Janczuk",
    "email": "tomasz@janczuk.org",
    "url": "http://tomasz.janczuk.org"
  },
  "version": "0.5.1",
  "description": "Send push notifications to Windows 8 devices using WNS",
  "tags": [
    "azure",
    "sdk",
    "windows 8",
    "notifications",
    "wns"
  ],
  "main": "./lib/wns.js",
  "engines": {
    "node": ">= 0.6.17"
  },
  "licenses": [
    {
      "type": "Apache",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.2.0",
    "nock": "0.13.3"
  },
  "homepage": "https://github.com/tjanczuk/wns",
  "repository": {
    "type": "git",
    "url": "git@github.com:tjanczuk/wns.git"
  },
  "bugs": {
    "url": "http://github.com/tjanczuk/wns/issues"
  },
  "readme": "wns\n===\n\nSend push notifications from a node.js application to a Windows 8 device using [Windows Notification Services](http://msdn.microsoft.com/en-us/library/windows/apps/hh913756.aspx). \n\nThis module helps you take care of the interaction #5 on the diagram below: \n\n<img src=\"http://i.msdn.microsoft.com/dynimg/IC554245.png\"/>\n\n## What you need\n\n* Register your cloud service (web application) at https://manage.dev.live.com/build. Your application will be assigned a Package Security Identifier (SID) and Client Secret. These allow your web application to be authenticated to the Windows Notificaton Service.  \n* A channel URL to send notifications to. This is normally created from within your Windows 8 application running on a particular device and securely passed to your web application. The channel URL uniquely identifies the instance of an application running on a particular device.  \n\n## Your first notification\n\nInstall ```wns``` module with\n\n```\nnpm install wns\n```\n\nThen send a notification to your Windows 8 application with\n\n```\nvar wns = require('wns');\n\nvar channelUrl = '{url to your application's notification channel}';\nvar options = {\n\tclient_id: '{your Package Security Identifier}',\n\tclient_secret: '{your Client Secret}'\t\n};\n\nwns.sendTileSquareBlock(channelUrl, 'Yes!', 'It worked!', options, function (error, result) {\n\tif (error)\n\t\tconsole.error(error);\n\telse\n\t\tconsole.log(result);\n});\n```\n\n## Notification types\n\nWindows Notification Service supports [tile](http://msdn.microsoft.com/en-us/library/windows/apps/hh761491.aspx), [toast](http://msdn.microsoft.com/en-us/library/windows/apps/hh761494.aspx) and [badge](http://msdn.microsoft.com/en-us/library/windows/apps/br212849.aspx) notification types. The ```wns``` module offers methods to send each type of notification. \n\n### Tile and toast notifications\n\nFor tile notifications, use one of the following methods:\n\n* sendTileSquareBlock\n* sendTileSquareText01\n* sendTileSquareText02\n* sendTileSquareText03\n* sendTileSquareText04\n* sendTileWideText01\n* sendTileWideText02\n* sendTileWideText03\n* sendTileWideText04\n* sendTileWideText05\n* sendTileWideText06\n* sendTileWideText07\n* sendTileWideText08\n* sendTileWideText09\n* sendTileWideText10\n* sendTileWideText11\n* sendTileSquareImage\n* sendTileSquarePeekImageAndText01\n* sendTileSquarePeekImageAndText02\n* sendTileSquarePeekImageAndText03\n* sendTileSquarePeekImageAndText04\n* sendTileWideImage\n* sendTileWideImageCollection\n* sendTileWideImageAndText01\n* sendTileWideImageAndText02\n* sendTileWideBlockAndText01\n* sendTileWideBlockAndText02\n* sendTileWideSmallImageAndText01\n* sendTileWideSmallImageAndText02\n* sendTileWideSmallImageAndText03\n* sendTileWideSmallImageAndText04\n* sendTileWideSmallImageAndText05\n* sendTileWidePeekImageCollection01\n* sendTileWidePeekImageCollection02\n* sendTileWidePeekImageCollection03\n* sendTileWidePeekImageCollection04\n* sendTileWidePeekImageCollection05\n* sendTileWidePeekImageCollection06\n* sendTileWidePeekImageAndText01\n* sendTileWidePeekImageAndText02\n* sendTileWidePeekImage01\n* sendTileWidePeekImage02\n* sendTileWidePeekImage03\n* sendTileWidePeekImage04\n* sendTileWidePeekImage05\n* sendTileWidePeekImage06\n\nFor toast notifications, use one of the following methods:\n\n* sendToastText01\n* sendToastText02\n* sendToastText03\n* sendToastText04\n* sendToastImageAndText01\n* sendToastImageAndText02\n* sendToastImageAndText03\n* sendToastImageAndText04\n\nEach of the methods that send tile and toast notifications have two altenative parameter signatures:\n\n```\nsendXYZ(channel, payload, [options], [callback])\nsendXYZ(channel, string1, string2, ..., [options], [callback])\n```\n\nIn both cases the meaning of ```channel```, ```options```, and ```callback``` is the same:\n\n* ```channel``` [required] - the notification channel URL of the target instance of a Windows 8 application.\n* ```options``` [optional] - allows specifying web application credentials to authenticate the web application to Windows Notification Service. If this parameter is not specified, the ```WNS_CLIENT_ID``` environment variable must be set to the Package Security Identifier (SID), and the ```WNS_CLIENT_SECRET``` environment variable must be set to the Client Secret of the web application. \n  * ```client_id``` [optional] - Package Security Identifier (SID) or the web application. If absent, the value must be provided through ```WNS_CLIENT_ID``` environment variable.\n  * ```client_secret``` [optional] - Client Secret of the web application. If absent, the value must be provided through the ```WNS_CLIENT_SECRET``` environment variable.\n  * ```accessToken``` [optional] - OAuth access token to be used to send notifications. This is normally issued by Windows Notification Service during one of the prior calls to send a notification and passed to the applicaton through the ```callback``` parameter.\n  * ```headers``` [optional] - any additional HTTP request headers to include in the request sent to Windows Notification Service. For a list of available HTTP request headers see [here](http://msdn.microsoft.com/en-us/library/windows/apps/hh465435.aspx).\n* ```callback``` [optional] - a callback function that will be invoked with two parameters: (error, result), where only one is present at any time. The ```error``` parameter is an instance of ```Error``` while ```result``` is a regular object. Both contain the following members:\n  * ```statusCode``` [optional] - the HTTP response status code from Windows Notification Service (for definitions see [here](http://msdn.microsoft.com/en-us/library/windows/apps/hh465435.aspx#send_notification_response)).\n  * ```headers``` [optional] - the HTTP response headers (for WNS specific HTTP response headers see [here](http://msdn.microsoft.com/en-us/library/windows/apps/hh465435.aspx#send_notification_response)).\n  * ```innerError``` [optional] - in case of an error this may contain more information about the condition.\n  * ```newAccessToken``` [optional] - if a new OAuth access token had been obtained in the course of processing the request, it will be provided here. Subsequent calls to ```sendXYZ``` functions should specify this value in the ```options.accessToken``` field. \n\nThe two ```sendXYZ``` method overrides differ in how notification parametrs are specified. Each kind of tile or toast notification contains a specific number of images and text fields. Each image is specified with two strings: its URL and its alternative text. Each text field is specified with just one string. \n\nThe overload that accepts a sequence of ```string1, string2, ...``` parameters requires each of these parameters to be a string corresponding to an image or text field definition. The order of these fields must match the document order of a specific field in the [tile](http://msdn.microsoft.com/en-us/library/windows/apps/hh761491.aspx) or [toast](http://msdn.microsoft.com/en-us/library/windows/apps/hh761494.aspx) notification schema corresponding to the method name (e.g. ```sendTileSquarePeekImageAndText01``` requires a total of 6 parameters in that order: 1 to specify the image URL, 1 to specify the image alt text, and 4 simple text parameters). \n\nThe overload that accepts the ```payload``` parameter requires that ```payload``` is an object. Fields of the object allow specification of image and text parameters using the following naming convention:\n\n* ```image{N}src``` specifies the URL of the N-th image in document order, starting from 1\n* ```image{N}alt``` specifies the alt text of the N-th image in document order, starting from 1\n* ```text{N}``` specifies the value of the N-th text field in document order, starting from 1\n* any parameters that are missing are assumed to be empty strings\n* any extra parameters not required by a particular tile or toast template are ignored\n\nFor example:\n\n```\nvar channel = '{channel_url}';\nvar currentAccessToken;\n\nwns.sendTileSquarePeekImageAndText01(\n\tchannel,\n\t{\n\t\timage1src: 'http://foobar.com/dog.jpg',\n\t\timage1alt: 'A dog',\n\t\ttext1: 'This is a dog',\n\t\ttext2: 'The dog is nice',\n\t\ttext3: 'The dog bites',\n\t\ttext4: 'Beware of dog'\n\t},\n\t{\n\t\tclient_id: '{your Package Security Identifier}',\n\t\tclient_secret: '{your Client Secret}',\n\t\taccessToken: currentAccessToken\n\t}, \n\tfunction (error, result) {\n\t\tcurrentAccessToken = error ? error.newAccessToken : result.newAccessToken;\n\t});\n```\n\n### Badge notifications\n\nTo send a badge notification, use this method:\n\n```\nwns.sendBadge(channel, value, [options], [callback])\n```\n\nThe meaning and behavior of ```channel```, ```options```, and ```callback``` is the same as for tile and toast notifications.\n\nThe ```value``` can be either a simple string or number, in which case it can assume values specified [here](http://msdn.microsoft.com/en-us/library/windows/apps/br212849.aspx), or it can be an object with 2 properties:\n\n* ```value``` [required] - one of the values specified [here](http://msdn.microsoft.com/en-us/library/windows/apps/br212849.aspx).\n* ```version``` [optional] - badge schema version (by default 1).\n\nFor example:\n\n```\nvar channel = '{channel_url}';\nwns.sendBadge(channel, 'alert');\n```\n\n### Low level notifications\n\nThere is one more method that allows sending pre-formatted notifiction messages that adhere to the tile, toast, or badge schema:\n\n```\nwns.send(channel, payload, type, [options], [callback])\n```\n\n The caller takes responsibility for providing a pre-formatted string with XML of the notification as the ```payload``` parameter. The ```type``` parameter specifies the type of the notification as one of the string values specified [here](http://msdn.microsoft.com/en-us/library/windows/apps/hh465435.aspx#pncodes_x_wns_type).\n \n## Running tests\n \nTests are using mocha and nock which are listed as dev dependencies. To run tests invoke mocha from the root of the repository:\n \n```\nmocha\n```",
  "_id": "wns@0.5.1",
  "dist": {
    "shasum": "3532e5284d0ebc98e888dd3514cfcf33373a5ae7"
  },
  "_from": "wns"
}
